
<a href="/">index</a><br />
<br />

<!-- a typical list 
#######################
<ul>
<li></li>
<li></li>
</ul>
#######################
-->

<!-- a typical template
#######################
<b> title </b>
<br />
<pre>
  content
</pre>
<hr />
#######################
-->
<b> Macros in vim
<br />
<pre>
  In vim normal mode type q then the register name :q{register_name}.
Then type q to end recording : q. Type  @{register_name} to call macro.
</pre>
<hr />




<b> Using rails console with DB rollback after session </b>
<br />
<pre>
  $ ruby script/console --sandbox
</pre>
<hr />


<b> Switching Java Versions in Mac OS X </b>
<br />
<pre>
  Run this <a href="https://gist.github.com/1061556">script</a>
</pre>
<hr />


<b> Remote Pair Programming with Vim, ssh and screen </b>
<br />
<pre>
First User:
  $ ssh shared_user@shared_machine
  $ screen -S coding
     <ctrl> A :multiuser on

Second User:
  $ ssh shared_user@shared_machine
  $ screen -x coding
</pre>
<hr />


<b> Testing Javascript - QUnit vs Jasmine</b>
<br />
<pre>
    Looking for Javascript testing frameworks, I bumped into QUnit. It is the 
official testsuite of JQuery so this immediately impressed me. I then wrote in 
my todo list: "try QUnit". It never got done. Maybe I did not see a simple 
example on how to do this, or the test syntax not too similar to rspec or other
ruby testing, or for whatever reason.
  
    Getting sidetracked and trying to solve a Datastore problem, browsing 
through Railscasts I stumbled upon <a href="http://railscasts.com/episodes/261-testing-javascript-with-jasmine">a screencast on how to test javascript
with jasmine</a>. I went along until about halfway of the 15 minute screencast
and was already able to setup a simple rails project which had javascript 
testing. Reasons: test syntax was similar to ruby rspec, easy to setup in rails
or standalone, test results looked like something in the console and it just 
worked. This will be my javascript tester for a while.


    Steps:

* Create new rails project

* In Gemfile:

  gem 'jquery-rails'
  group :development, :test do
    # others gems...
    gem 'jasmine'
  end

* run bundle in root of project
  
  $ bundle

* in spec/javascript/ create your_test_spec.js

  describe("Car", function()  {
    it("does something", function() {
      expect(Car.most_expensive_model()).toEqual("Honda Accord");
    });
  });
    
* run spec with

  $ rake jasmine

* in public/javascripts create your_class.js

  var Car = {
    most_expensive_model: function() {
      return 'Honda Accord';
    }
  }


  More complete tests can be found bundled with the jasmine standalone package.
</pre>
<hr />


<b> Debugging Javascript</b>
<br />
<pre>
    I've been asked to figure out a way to create Javascript based UI and debug
Javascript better. So I looked in the internet for a UI designer - debugger 
combo and took a quick look at stuff like GWT, UI designers like EXT Designer, 
Javascript debuggers, IDE's, some application servers, etc. 

    To make the story shorter, I recommended using UI designing tools and 
libraries for purely javascript and not tied to application environments, 
languages other than Javascript or IDE's. Keep it simple and do not try to study
another application server, IDE, framework if ever you are just going to extend,
maintain an existing project - unless you really have to make like a separate 
system you can code from scratch.

    Then use Firebug, IE javascript debuggers, etc for debugging. I could not 
find any good IDE or single debugger to test Javascript in different browsers 
then why not just use the best debugger for each browser? Or maybe debug 
'generalized' javascript in the best Firebug and for other purposes use the 
other debuggers.

    Last and most important, prevention is worth a pound of cure. Test, test, 
test. Use either QUnit or Jasmine for unit testing Javascript (more on this at 
a later post). If there are large units of code then divide into smaller ones 
and test, test, test. Test first, test during and test after.

</pre>
<hr />


<b> postgres getting started</b>
<br />
<pre>
$ createdb myTestDatabase
$ createuser -d -a admin
</pre>
<hr />


<b> Howto find coordinates of current location centered in Google Maps</b>
<br />
<pre>
javascript:void(prompt('',gApplication.getMap().getCenter()));
</pre>
<hr />


<b> Creating index to rails app </b>
<br />
<pre>
After:
  $ rails g controller store index

edit config/routes.rb

MyApp::Application.routes.draw do
  get "store/index"

  resources :my_models
  # You can have the root of your site routed with "root"
  # just remember to delete public/index.html.
  # root :to => "welcome#index"
  # baloi start
  root :to => "store#index"
  # baloi end
end

Delete public/index.html
</pre>
<hr />

<b> Using scp </b>
<br />
<pre>
scp something -P 443 name@71.6.200.19:/path_to_file/filename .
</pre>
<hr />

<b> Mirror a website locally using wget </b>
<br />
<pre>
$ wget -mk -w 20 http://www.example.com/
</pre>
<hr />

<b> A new rails app </b>
<br />
<pre>
$ rails new devshop
$ cp ../BaloiGalia/Gemfile . 
$ bundle update
$ git init
$ git add .
$ heroku create --stack bamboo-mri-1.9.2 devshop
$ git commit -a

$ touch test/integration_test_helper.rb
    require "test_helper"
    require "capybara/rails"
     
    module ActionController
      class IntegrationTest
        include Capybara
      end
    end

  Add this to integration tests
    require 'integration_test_helper'

$ ruby script/rails g model Product title:string description:text price:decimal
$ rake db:migrate
$ ruby script/rails g controller Product Admin
$ ruby script/rails g integration_test product_creation
  
  Add gem 'turn' and gem 'term-ansicolor' in Gemfile


</pre>
<hr />


<b> fix rake problem: undefined method `task' </b>
<br />
<pre>
  - run: gem uninstall rake -v 0.9 (add sudo unless you use rvm)<br/>
  - add to your Gemfile: gem 'rake', '~> 0.8.7' <br/>
  - and then run: bundle update <br/>
</pre>
<hr />


<b> Add this to tests so test_helper will be found</b>
<br />
<pre>
$: << 'test'
</pre>
<hr />


<b> heroku console and db environment</b>
<br />
<pre>
heroku console <br/>
  ENV['DATABASE_URL']
</pre>
<hr />


<b> heroku creation with bamboo stack </b>
<br />
<pre>
$ git init <br/>
$ git add . <br/>
$ git commit -a <br/>
$ heroku create --stack bamboo-mri-1.9.2 my-project<br/>
$ gem uninstall rake -v 0.9 (add sudo unless you use rvm)<br/>
add to your Gemfile: gem 'rake', '~> 0.8.7' <br/>
$ bundle update <br/>
$ git push heroku master<br/>
<i>in Gemfile add:</i> <br/>
  group :production do <br/>
    gem 'pg' <br/>
  end <br/>
$ heroku rake db:migrate 
</pre>
<hr />

<b> Using screen and vim </b>
<br />
<pre>
  $ screen # start from the home directory to be able to load all paths
  C-a S  # to split screen
  C-  <tab> # to navigate up and down splits
</pre>
<hr />

<b> Splitting screen as your vim shell </b>
From http://www.marksanborn.net/howto/adding-shell-to-vim-using-screen/
<br />
<pre>
C-a S   # split screen 'S' is capital <br/>
C-a <tab> :resize 25 <br/>
C-<tab>   # moves cursor from one screen window to the other <br/>
</pre>
<hr />

<b> using only one shell and vim </b>
<br />
<pre>
* from vim
  CTRL-z # to got to shell
* from shell
  fg <cr> # to go back to vim (put vim to foreground)
</pre>
<hr />


<b> mapping in vim </b>
<br />
<pre>
* map ',t' to save and then rspec the current file
  :map ,t :w\|!rspec % <cr>

</pre>
<hr />


<b> zsh-git integration</b>
<br />
<pre>
https://github.com/jcorbin/zsh-git
</pre>
<hr />


<b> change shell to zsh </b>
<br />
<pre>
chsh -s /bin/zsh
</pre>

<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-24466734-3']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
